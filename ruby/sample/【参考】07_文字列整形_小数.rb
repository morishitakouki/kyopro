# rjest
# 文字列を右詰
p "foo".rjust(10)        # => "       foo"
p "foo".rjust(9)         # => "      foo"
p "foo".rjust(2)         # => "foo"
p "foo".rjust(1)         # => "foo"
p "foo".rjust(10, "*")   # => "*******foo"
p "123".rjust(10, "0")   # => "0000000123"

# 0埋め
format("%06d", 123)  # => "000123"
# 「%」→頭に絶対つけるやつ
# 「6」→桁数。 ７桁なら7にする。 ※10桁の場合は「%010d」
# 「d」→10進数で表示

# スペース埋め
format("%10d", 123)  # => "       123"

# 置換
text = '123,456-789'
# 第1引数に文字列を渡すと、完全一致する文字列を第2引数で置き換える
text.gsub(',', ':') #=> "123:456-789"
# 正規表現を渡すと、マッチした部分を第2引数で置き換える
text.gsub(/,¦-/, ':') #=> "123:456:789"

# 小数切り捨て
34567.89.floor(-5)  # => 0
34567.89.floor(-4)  # => 30000
34567.89.floor(-3)  # => 34000
34567.89.floor(-2)  # => 34500
34567.89.floor(-1)  # => 34560
34567.89.floor(0)   # => 34567
34567.89.floor(1)   # => 34567.8
34567.89.floor(2)   # => 34567.89
# 小数切り上げ ceil
# 四捨五入 round

# 小数第3位に四捨五入で丸める
d = 3
n = 123.45678
n = n.round(d)
puts(format("%.*f", d, n)) # 123.457
# 「%」→頭に絶対つけるやつ
# 「.」→浮動小数点数 (f, e, E, g, G) に対しては必ず出力に"."をつけます。
# 「*」幅
# f→浮動小数点数 (f, e, E, g, G)
# d→*への引数
# n→対象とする数
